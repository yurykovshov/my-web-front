sudo: false

language: node_js # elm is installed from npm (see install below)
node_js: node     # use "latest" version of Node.js

cache:
  directories: # so subsequent builds run faster
    - elm-stuff/build-artifacts
    - elm-stuff/packages
    - tests/elm-stuff/build-artifacts # elm-test init creates a "tests/" dir
    - tests/elm-stuff/packages        # cache files that haven't changed
    - sysconfcpus
    - $HOME/.npm # https://stackoverflow.com/a/42523517/1148249

services:
  - docker

before_install:
  - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  - | # epic build time improvement - see https://github.com/elm-lang/elm-compiler/issues/1473#issuecomment-245704142
    if [ ! -d sysconfcpus/bin ];
    then
      git clone https://github.com/obmarg/libsysconfcpus.git;
      cd libsysconfcpus;
      ./configure --prefix=$TRAVIS_BUILD_DIR/sysconfcpus;
      make && make install;
      cd ..;
    fi

install:
  - npm install -g elm@0.19.0-bugfix2 elm-format
  - mv $(npm config get prefix)/bin/elm $(npm config get prefix)/bin/elm-old
  - printf '%s\n\n' '#!/bin/bash' 'echo "Running elm with sysconfcpus -n 1"' '$TRAVIS_BUILD_DIR/sysconfcpus/bin/sysconfcpus -n 1 elm-old "$@"' > $(npm config get prefix)/bin/elm
  - chmod +x $(npm config get prefix)/bin/elm
  - yarn install


script:
  - elm-format --validate .
  - yarn prod
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - docker build -t yurykovshov/my-web-front .
  - docker push yurykovshov/my-web-front
